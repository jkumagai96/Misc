{"name":"Misc","tagline":"","body":"# Technical Guidelines Series - Part 1**  \r\n\r\n\r\n**Prepared by Joy Kumagai - Technical Support Unit of Knowledge and Data**  \r\n**Reviewed by Aidin Niamir - Head of the Technical Support Unit of Knowledge and Data**  \r\n9 July 2020  \r\n\r\n## **1. Conversion to the Robinson Projection** \r\n\r\nThe guide will show how to convert raster and vector data from a projection to the Robinson projection using R. Please note that whether one would like to display a Pacific centered or Greenwich centered map depends on the application.  \r\n\r\nBegin by loading the following packages. \r\n```{r message = FALSE}\r\nlibrary(raster)\r\nlibrary(graticule)\r\nlibrary(rgdal)\r\nlibrary(rworldmap)\r\n```\r\n\r\nNext, we define the Robinson projection using PROJ.4 notation. This information can be found at the [this link](https://epsg.io/54030).  \r\n\r\n```{r}\r\ncrs_robin <- CRS(\"+proj=robin +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\") \r\n```\r\n\r\n### 1.1 Raster Data \r\nTo produce a Greenwich centered map in the Robinson projection with raster data, we generate a random raster and plot the result, but please load and use the raster data that you will be working with. The crs() function will output the projection that your data is in.\r\n```{r }\r\nr <- raster(nrows=180, ncols=360, xmn=-180, xmx=180,ymn=-90, ymx=90,res = 1) # This is the raster\r\nr <- setValues(r,runif(ncell(r))) # Fill the raster with random values \r\ncrs(r) <- \"+proj=longlat +datum=WGS84 +no_defs\" # Define the original projection of the raster (WGS 1984)\r\ncrs(r)\r\nplot(r) # Plot the raster \r\n```\r\n\r\nNow we will convert this raster to the Robinson projection and plot the result with longitude and latitude lines. \r\n```{r, warning = FALSE}\r\nr <- projectRaster(r, crs=crs_robin, over = TRUE) # project to Robinson\r\n\r\nplot(r,axes = F,legend=F) #Plot the raster\r\n\r\nlat <- c(-90, -60, -30, 0, 30, 60, 90)\r\nlon <- c(-180, -120, -60, 0, 60, 120, 180)\r\nllgridlines(as(r, \"SpatialPoints\"), easts = lon, norths = lat,cex=0.5) # Add graticules to map \r\n```\r\n  \r\n### 1.2 Vector Data \r\nIn this section, we will produce a world map of countries with vector data (points, lines, polygons). \r\nFirst, we will load, check the projection, and plot a world map of countries.     \r\n```{r}\r\nworldmap <- getMap(resolution = \"coarse\") # Load world map - countries \r\ncrs(worldmap)\r\nplot(worldmap) # Plot world map \r\n```\r\n  \r\nNow, we project the vector data into the Robinson projection and plot the map. \r\n```{r, warning = FALSE}\r\nworldmap<-spTransform(worldmap,crs_robin) # Project to Robinson \r\n\r\nplot(worldmap) # Plot world map (vector)\r\n\r\nlat <- c(-90, -60, -30, 0, 30, 60, 90)\r\nlon <- c(-180, -120, -60, 0, 60, 120, 180)\r\nllgridlines(as(r, \"SpatialPoints\"), easts = lon, norths = lat,cex=0.5) # Add graticules \r\n```\r\n  \r\n### 1.3 Combine Vector and Raster\r\nFinally, we will visualize both the raster and vector data together in one map. \r\n```{r, warning = FALSE}\r\n## Vector & Raster\r\nplot(r,axes = F,legend=F) # Plot the raster\r\nplot(worldmap,add=T) # Plot the vector data \r\nllgridlines(as(r, \"SpatialPoints\"), easts = lon, norths = lat,cex=0.5)\r\n```","note":"Don't delete this file! It's used internally to help with page regeneration."}